// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protojob

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	Start(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*JobID, error)
	GetStatus(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Status, error)
	GetJobIDs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobIDList, error)
	GetResult(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Result, error)
	StreamOutput(ctx context.Context, in *JobID, opts ...grpc.CallOption) (Worker_StreamOutputClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Start(ctx context.Context, in *Cmd, opts ...grpc.CallOption) (*JobID, error) {
	out := new(JobID)
	err := c.cc.Invoke(ctx, "/protojob.Worker/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetStatus(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/protojob.Worker/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetJobIDs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*JobIDList, error) {
	out := new(JobIDList)
	err := c.cc.Invoke(ctx, "/protojob.Worker/GetJobIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetResult(ctx context.Context, in *JobID, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/protojob.Worker/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StreamOutput(ctx context.Context, in *JobID, opts ...grpc.CallOption) (Worker_StreamOutputClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/protojob.Worker/StreamOutput", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamOutputClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamOutputClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type workerStreamOutputClient struct {
	grpc.ClientStream
}

func (x *workerStreamOutputClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	Start(context.Context, *Cmd) (*JobID, error)
	GetStatus(context.Context, *JobID) (*Status, error)
	GetJobIDs(context.Context, *Empty) (*JobIDList, error)
	GetResult(context.Context, *JobID) (*Result, error)
	StreamOutput(*JobID, Worker_StreamOutputServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) Start(context.Context, *Cmd) (*JobID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedWorkerServer) GetStatus(context.Context, *JobID) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWorkerServer) GetJobIDs(context.Context, *Empty) (*JobIDList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobIDs not implemented")
}
func (UnimplementedWorkerServer) GetResult(context.Context, *JobID) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}
func (UnimplementedWorkerServer) StreamOutput(*JobID, Worker_StreamOutputServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamOutput not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cmd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protojob.Worker/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Start(ctx, req.(*Cmd))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protojob.Worker/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetStatus(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetJobIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetJobIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protojob.Worker/GetJobIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetJobIDs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protojob.Worker/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetResult(ctx, req.(*JobID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StreamOutput_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JobID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamOutput(m, &workerStreamOutputServer{stream})
}

type Worker_StreamOutputServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type workerStreamOutputServer struct {
	grpc.ServerStream
}

func (x *workerStreamOutputServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protojob.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _Worker_Start_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Worker_GetStatus_Handler,
		},
		{
			MethodName: "GetJobIDs",
			Handler:    _Worker_GetJobIDs_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Worker_GetResult_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamOutput",
			Handler:       _Worker_StreamOutput_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protojob.proto",
}
